{"ast":null,"code":"var _jsxFileName = \"/home/moringa/Development/code/article/src/pages/Registration/Registration.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Form, Button, Message } from 'semantic-ui-react';\nimport { useHistory } from \"react-router-dom\";\nimport * as Yup from 'yup';\nimport { Formik, Form as FormikForm, Field } from 'formik';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = Yup.object().shape({\n  username: Yup.string().required('Username is required').min(5, 'Username must be at least 5 characters'),\n  email: Yup.string().required('Email is required').email('Invalid email'),\n  password: Yup.string().required('Password is required').min(5, 'Password must be at least 5 characters')\n});\nfunction Registration() {\n  _s();\n  const [serverError, setServerError] = useState('');\n  const history = useHistory();\n  const handleSubmit = async (values, _ref) => {\n    let {\n      setSubmitting\n    } = _ref;\n    try {\n      //make a post request to the server to store the registration data\n      //if successful, redirect the user to the home page\n      setSubmitting(false);\n      history.push('/home');\n    } catch (err) {\n      setServerError(err.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"registration-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"https://t4.ftcdn.net/jpg/03/83/84/49/240_F_383844937_VVv0WYa8qmKZZNfTS3P6dwnIeAzQRg3n.jpg\",\n      alt: \"background\",\n      className: \"bg-img\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        username: '',\n        email: '',\n        password: ''\n      },\n      validationSchema: validationSchema,\n      onSubmit: handleSubmit,\n      children: _ref2 => {\n        let {\n          isSubmitting,\n          isValid\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(FormikForm, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              type: \"text\",\n              name: \"username\",\n              placeholder: \"Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              type: \"email\",\n              name: \"email\",\n              placeholder: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              type: \"password\",\n              name: \"password\",\n              placeholder: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this), serverError && /*#__PURE__*/_jsxDEV(Message, {\n            error: true,\n            content: serverError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            disabled: isSubmitting || !isValid,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"button\",\n            onClick: () => history.push('/login'),\n            children: \"Already have an account?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(Registration, \"iwTfo9jm2Wbv6PLtc5WSQrI+qTE=\", false, function () {\n  return [useHistory];\n});\n_c = Registration;\nexport default Registration;\nvar _c;\n$RefreshReg$(_c, \"Registration\");","map":{"version":3,"names":["React","useState","Form","Button","Message","useHistory","Yup","Formik","FormikForm","Field","validationSchema","object","shape","username","string","required","min","email","password","Registration","serverError","setServerError","history","handleSubmit","values","setSubmitting","push","err","message","isSubmitting","isValid"],"sources":["/home/moringa/Development/code/article/src/pages/Registration/Registration.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Form, Button, Message } from 'semantic-ui-react';\nimport { useHistory } from \"react-router-dom\";\nimport * as Yup from 'yup';\nimport { Formik, Form as FormikForm, Field } from 'formik';\n\nconst validationSchema = Yup.object().shape({\n  username: Yup.string()\n    .required('Username is required')\n    .min(5, 'Username must be at least 5 characters'),\n  email: Yup.string()\n    .required('Email is required')\n    .email('Invalid email'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(5, 'Password must be at least 5 characters'),\n});\n\nfunction Registration() {\n  const [serverError, setServerError] = useState('');\n  const history = useHistory();\n\n  const handleSubmit = async (values, { setSubmitting }) => {\n    try {\n      //make a post request to the server to store the registration data\n      //if successful, redirect the user to the home page\n      setSubmitting(false);\n      history.push('/home');\n    } catch (err) {\n      setServerError(err.message);\n    }\n  };\n\n  return (\n    <div className=\"registration-form\">\n      <img src=\"https://t4.ftcdn.net/jpg/03/83/84/49/240_F_383844937_VVv0WYa8qmKZZNfTS3P6dwnIeAzQRg3n.jpg\" alt=\"background\" className=\"bg-img\" />\n      <Formik\n        initialValues={{ username: '', email: '', password: '' }}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ isSubmitting, isValid }) => (\n          <FormikForm>\n            <Form.Field>\n              <Field\n                type=\"text\"\n                name=\"username\"\n                placeholder=\"Username\"\n              />\n            </Form.Field>\n            <Form.Field>\n              <Field\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Email\"\n              />\n            </Form.Field>\n            <Form.Field>\n              <Field\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"Password\"\n              />\n            </Form.Field>\n            {serverError && <Message error content={serverError} />}\n            <Button type=\"submit\" disabled={isSubmitting || !isValid}>\n              Submit\n            </Button>\n            <Button type=\"button\" onClick={() => history.push('/login')}>Already have an account?</Button>\n          </FormikForm>\n        )}\n      </Formik>\n    </div>\n  );\n}\n\nexport default Registration;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}