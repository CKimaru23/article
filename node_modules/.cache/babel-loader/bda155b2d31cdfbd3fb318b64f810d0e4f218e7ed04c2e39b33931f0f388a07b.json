{"ast":null,"code":"var _jsxFileName = \"/home/moringa/Development/code/article/src/pages/Modify/DisplayAllPosts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\n// import CreateNewPost from \"./CreateNewPost\";\nimport ModifyPost from \"./ModifyPost\";\nimport Post from \"./Post\";\nimport blogList from \"../../components/common/data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DisplayAllPosts = () => {\n  _s();\n  // managing states below\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [allPosts, setAllPosts] = useState(blogList);\n\n  // const [allPosts, setAllPosts] = useState([]) // can also be used\n  const [isCreateNewPost, setIsCreateNewPost] = useState(false);\n  const [isModifyPost, setIsModifyPost] = useState(false);\n  const [editPostId, setEditPostId] = useState(\"\");\n\n  // Initialize useRef (to empty title and content once saved)\n  const getTitle = useRef();\n  const getContent = useRef();\n\n  // function 1 (accepting title in state by user input)\n  const savePostTitleToState = event => {\n    setTitle(event.target.value);\n  };\n\n  // function 2 (accepting content/description in state by user input)\n  const savePostContentToState = event => {\n    setContent(event.target.value);\n  };\n\n  // function 3 (to save title and content in allPosts state)\n  const savePost = event => {\n    event.preventDefault();\n    const id = Date.now();\n    setAllPosts([...allPosts, {\n      title,\n      content,\n      id\n    }]);\n    getTitle.current.value = \"\";\n    getContent.current.value = \"\";\n    toggleCreateNewPost();\n  };\n\n  // function 4 (toggle create new post visibility)\n  const toggleCreateNewPost = () => {\n    setIsCreateNewPost(!isCreateNewPost);\n  };\n\n  // function 5 (toggle post editing)\n  const toggleModifyPostComponent = () => {\n    setIsModifyPost(!isModifyPost);\n  };\n\n  // function 6 (to edit posts)\n  const editPost = id => {\n    setEditPostId(id);\n    toggleModifyPostComponent();\n  };\n\n  // function 7 (to update the posts)\n  const updatePost = event => {\n    event.preventDefault();\n    const updatedPost = allPosts.map(eachPost => {\n      if (eachPost.id === editPostId) {\n        return {\n          ...eachPost,\n          title: title || eachPost.title,\n          content: content || eachPost.content\n        };\n      }\n      return eachPost;\n    });\n    setAllPosts(updatedPost);\n    toggleModifyPostComponent();\n  };\n\n  // function 8 (to delete posts)\n  const deletePost = id => {\n    const modifiedPost = allPosts.filter(eachPost => {\n      return eachPost.id !== id;\n    });\n    setAllPosts(modifiedPost);\n  };\n  if (isModifyPost) {\n    const post = allPosts.find(post => {\n      return post.id === editPostId;\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ModifyPost, {\n        title: post.title,\n        content: post.content,\n        updatePost: updatePost,\n        savePostTitleToState: savePostTitleToState,\n        savePostContentToState: savePostContentToState,\n        toggleCreateNewPost: toggleCreateNewPost\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger cancel-update-button\",\n        onClick: toggleModifyPostComponent,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n};\n_s(DisplayAllPosts, \"s4/waH27ChB1G+p2iVhzLtyNl10=\");\n_c = DisplayAllPosts;\nexport default DisplayAllPosts;\nvar _c;\n$RefreshReg$(_c, \"DisplayAllPosts\");","map":{"version":3,"names":["React","useState","useRef","ModifyPost","Post","blogList","DisplayAllPosts","title","setTitle","content","setContent","allPosts","setAllPosts","isCreateNewPost","setIsCreateNewPost","isModifyPost","setIsModifyPost","editPostId","setEditPostId","getTitle","getContent","savePostTitleToState","event","target","value","savePostContentToState","savePost","preventDefault","id","Date","now","current","toggleCreateNewPost","toggleModifyPostComponent","editPost","updatePost","updatedPost","map","eachPost","deletePost","modifiedPost","filter","post","find"],"sources":["/home/moringa/Development/code/article/src/pages/Modify/DisplayAllPosts.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\n// import CreateNewPost from \"./CreateNewPost\";\nimport ModifyPost from \"./ModifyPost\";\nimport Post from \"./Post\";\nimport blogList from \"../../components/common/data\"\n\nconst DisplayAllPosts = () => {\n  // managing states below\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [allPosts, setAllPosts] = useState(blogList);\n  \n  // const [allPosts, setAllPosts] = useState([]) // can also be used\n  const [isCreateNewPost, setIsCreateNewPost] = useState(false);\n  const [isModifyPost, setIsModifyPost] = useState(false);\n  const [editPostId, setEditPostId] = useState(\"\");\n\n  // Initialize useRef (to empty title and content once saved)\n  const getTitle = useRef();\n  const getContent = useRef();\n\n  // function 1 (accepting title in state by user input)\n  const savePostTitleToState = (event) => {\n    setTitle(event.target.value);\n  };\n\n  // function 2 (accepting content/description in state by user input)\n  const savePostContentToState = (event) => {\n    setContent(event.target.value);\n  };\n\n  // function 3 (to save title and content in allPosts state)\n  const savePost = (event) => {\n    event.preventDefault();\n    const id = Date.now();\n    setAllPosts([...allPosts, { title, content, id }]);\n    getTitle.current.value = \"\";\n    getContent.current.value = \"\";\n    toggleCreateNewPost();\n  };\n\n  // function 4 (toggle create new post visibility)\n  const toggleCreateNewPost = () => {\n    setIsCreateNewPost(!isCreateNewPost);\n  };\n\n  // function 5 (toggle post editing)\n  const toggleModifyPostComponent = () => {\n    setIsModifyPost(!isModifyPost);\n  };\n\n  // function 6 (to edit posts)\n  const editPost = (id) => {\n    setEditPostId(id);\n    toggleModifyPostComponent();\n  };\n\n  // function 7 (to update the posts)\n  const updatePost = (event) => {\n    event.preventDefault();\n    const updatedPost = allPosts.map((eachPost) => {\n      if (eachPost.id === editPostId) {\n        return {\n          ...eachPost,\n          title: title || eachPost.title,\n          content: content || eachPost.content\n        };\n      }\n\n      return eachPost;\n    });\n    setAllPosts(updatedPost);\n    toggleModifyPostComponent();\n  };\n\n  // function 8 (to delete posts)\n  const deletePost = (id) => {\n    const modifiedPost = allPosts.filter((eachPost) => {\n      return eachPost.id !== id;\n    });\n    setAllPosts(modifiedPost);\n  };\n\n  \n       if (isModifyPost) {\n        const post = allPosts.find((post) => {\n        return post.id === editPostId;\n      \n        });\n  \n\n    return (\n      <>\n        <ModifyPost\n          title={post.title}\n          content={post.content}\n          updatePost={updatePost}\n          savePostTitleToState={savePostTitleToState}\n          savePostContentToState={savePostContentToState}\n          toggleCreateNewPost={toggleCreateNewPost}\n        />\n        <button\n          className=\"btn btn-danger cancel-update-button\"\n          onClick={toggleModifyPostComponent}\n        >\n          Cancel\n        </button>\n      </>\n    );\n  }\n\n};\nexport default DisplayAllPosts;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}